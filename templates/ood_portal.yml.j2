# {{ ansible_managed }}
---
#
# Portal configuration
#

# The address and port to listen for connections on
# Example:
#     listen_addr_port: 443
# Default: null (don't add any more listen directives)
#listen_addr_port: null

# The server name used for name-based Virtual Host
# Example:
#     servername: 'www.example.com'
# Default: null (don't use name-based Virtual Host)
{% if servername is defined %}servername: {{ servername }}
{% else %}#servername: null
{% endif %}

# The server name used for rewrites
# Example:
#     proxy_server: 'proxy.example.com'
# Default: The value of servername
{% if proxy_server is defined %}proxy_server: {{ proxy_server }}
{% else %}#proxy_server: null
{% endif %}

# The port specification for the Virtual Host
# Example:
#     port: 8080
#Default: null (use default port 80 or 443 if SSL enabled)
port: {{ httpd_port }}

# List of SSL Apache directives
# Example:
#     ssl:
#       - 'SSLCertificateFile "/etc/pki/tls/certs/www.example.com.crt"'
#       - 'SSLCertificateKeyFile "/etc/pki/tls/private/www.example.com.key"'
# Default: null (no SSL support)
{% if ssl is defined %}
ssl:
{% for item in ssl  %}
- '{{ item }}'
{% endfor %}
{% else %}
# Default: null (no SSL support)
{% endif %}

# Root directory of log files (can be relative ServerRoot)
# Example:
#     logroot: '/path/to/my/logs'
# Default: 'logs' (this is relative to ServerRoot)
logroot: "{{ apache_log_dir }}"

# Should RewriteEngine be used
# Example:
#     use_rewrites: false
# Default: true
use_rewrites: {{ httpd_use_rewrites | bool | lower }}

# Should Maintenance Rewrite rules be added
# Example:
#   use_maintenance: false
# Default: true
use_maintenance: {{ use_maintenance | bool | lower }}

# List of IPs to whitelist when maintenance is enabled
# Example:
#   maintenance_ip_whitelist:
#     - 192.168.0..*
#     - 192.168.1..*
# Default: [] (no IPs whitelisted)
{% if maintenance_ip_whitelist is defined and maintenance_ip_whitelist|length > 0 %}
maintenance_ip_whitelist:
{% for item in maintenance_ip_whitelist  %}
  - '{{ item }}'
{% endfor %}
{% else %}
maintenance_ip_whitelist: []
{% endif %}

# Root directory of the Lua handler code
# Example:
#     lua_root: '/path/to/lua/handlers'
# Default : '/opt/ood/mod_ood_proxy/lib' (default install directory of mod_ood_proxy)
lua_root: "{{ lua_root }}"

# Verbosity of the Lua module logging
# (see https://httpd.apache.org/docs/2.4/mod/core.html#loglevel)
# Example:
#     lua_log_level: 'warn'
# Default: 'info' (get verbose logs)
lua_log_level: "{{ lua_log_level }}"

# System command used to map authenticated-user to system-user
# Example:
#     user_map_cmd: '/opt/ood/ood_auth_map/bin/ood_auth_map.regex --regex=''^(\w+)@example.com$'''
# Default: '/opt/ood/ood_auth_map/bin/ood_auth_map.regex' (this echo's back auth-user)
user_map_cmd: "{{ user_map_cmd }}"

# Use an alternative CGI environment variable instead of REMOTE_USER for
# determining the authenticated-user fed to the mapping script
# Example:
#     user_env: 'OIDC_CLAIM_preferred_username'
# Default: null (use REMOTE_USER)
{% if user_env is defined %}user_env: {{ user_env }}
{% else %}#user_env: null
{% endif %}

# Redirect user to the following URI if fail to map there authenticated-user to
# a system-user
# Example:
#     map_fail_uri: '/register'
# Default: null (don't redirect, just display error message)
{% if map_fail_uri is defined %}map_fail_uri: {{ map_fail_uri }}
{% else %}#map_fail_uri: null
{% endif %}

# System command used to run the `nginx_stage` script with sudo privileges
# Example:
#     pun_stage_cmd: 'sudo /path/to/nginx_stage'
# Default: 'sudo /opt/ood/nginx_stage/sbin/nginx_stage' (don't forget sudo)
pun_stage_cmd: "{{ pun_stage_cmd }}"

# List of Apache authentication directives
# NB: Be sure the appropriate Apache module is installed for this
# Default: (see below, uses basic auth with an htpasswd file)
#auth:
#  - 'AuthType Basic'
#  - 'AuthName "private"'
#  - 'AuthUserFile "/opt/rh/httpd24/root/etc/httpd/.htpasswd"'
#  - 'RequestHeader unset Authorization'
#  - 'Require valid-user'
auth:
{% for auth in httpd_auth  %}
- '{{ auth }}'
{% endfor %}

# Redirect user to the following URI when accessing root URI
# Example:
#     root_uri: '/my_uri'
#     # https://www.example.com/ => https://www.example.com/my_uri
# Default: '/pun/sys/dashboard' (default location of the OOD Dashboard app)
root_uri: {{ root_uri }}

# Track server-side analytics with a Google Analytics account and property
# (see https://github.com/OSC/mod_ood_proxy/blob/master/lib/analytics.lua for
# information on how to setup the GA property)
# Example:
#     analytics:
#       url: 'http://www.google-analytics.com/collect'
#       id: 'UA-79331310-4'
# Default: null (do not track)
{% if analytics_url is defined and analytics_id is defined %}
analytics:
  url: "{{ analytics_url }}"
  id: "{{ analytics_id }}"
{% else %}
#analytics: null
{% endif %}

#
# Publicly available assets
#

# Public sub-uri (available to public with no authentication)
# Example:
#     public_uri: '/assets'
# Default: '/public'
public_uri: "{{ httpd_public_uri }}"

# Root directory that serves the public sub-uri (be careful, everything under
# here is open to the public)
# Example:
#     public_root: '/path/to/public/assets'
# Default: '/var/www/ood/public'
public_root: "{{ httpd_public_root }}"

#
# Logout redirect helper
#

# Logout sub-uri
# Example
#     logout_uri: '/log_me_out'
# NB: If you change this, then modify the Dashboard app with the new sub-uri
# Default: '/logout' (the Dashboard app is by default going to expect this)
logout_uri: "{{ logout_uri }}"

# Redirect user to the following URI when accessing logout URI
# Example:
#     logout_redirect: '/oidc?logout=https%3A%2F%2Fwww.example.com'
# Default: '/pun/sys/dashboard/logout' (the Dashboard app provides a simple
# HTML page explaining logout to the user)
logout_redirect: "{{ logout_redirect }}"

#
# Reverse proxy to backend nodes
#

# Regular expression used for whitelisting allowed hostnames of nodes
# Example:
#     host_regex: '[\w.-]+\.example\.com'
# Default: '[^/]+' (allow reverse proxying to all hosts, this allows external
# hosts as well)
host_regex: '{{ host_regex }}'

# Sub-uri used to reverse proxy to backend web server running on node that
# knows the full URI path
# Example:
#     node_uri: '/node'
# Default: null (disable this feature)
{% if node_uri is defined %}node_uri: {{ node_uri }}
{% else %}#node_uri: null
{% endif %}

# Sub-uri used to reverse proxy to backend web server running on node that
# ONLY uses *relative* URI paths
# Example:
#     rnode_uri: '/rnode'
# Default: null (disable this feature)
{% if rnode_uri is defined %}rnode_uri: {{ rnode_uri }}
{% else %}#rnode_uri: null
{% endif %}

#
# Per-user NGINX Passenger apps
#

# Sub-uri used to control PUN processes
# Example:
#     nginx_uri: '/my_pun_controller'
# Default: '/nginx'
nginx_uri: {{ nginx_uri }}

# Sub-uri used to access the PUN processes
# Example:
#     pun_uri: '/my_pun_apps'
# Default: '/pun'
pun_uri: "{{ pun_uri }}"

# Root directory that contains the PUN Unix sockets that the proxy uses to
# connect to
# Example:
#     pun_socket_root: '/path/to/pun/sockets'
# Default: '/var/run/ondemand-nginx' (default location set in nginx_stage)
pun_socket_root: "{{ pun_socket_root }}"

# Number of times the proxy attempts to connect to the PUN Unix socket before
# giving up and displaying an error to the user
# Example:
#     pun_max_retries: 25
# Default: 5 (only try 5 times)
pun_max_retries: {{ pun_max_retries }}

#
# Support for OpenID Connect
#

# Sub-uri used by mod_auth_openidc for authentication
# Example:
#     oidc_uri: '/oidc'
# Default: null (disable OpenID Connect support)
{% if oidc_uri is defined %}oidc_uri: {{ oidc_uri }}
{% else %}#oidc_uri: null
{% endif %}

# Sub-uri user is redirected to if they are not authenticated. This is used to
# *discover* what ID provider the user will login through.
# Example:
#     oidc_discover_uri: '/discover'
# Default: null (disable support for discovering OpenID Connect IdP)
{% if oidc_discover_uri is defined %}oidc_discover_uri: {{ oidc_discover_uri }}
{% else %}#oidc_discover_uri: null
{% endif %}

# Root directory on the filesystem that serves the HTML code used to display
# the discovery page
# Example:
#     oidc_discover_root: '/var/www/ood/discover'
# Default: null (disable support for discovering OpenID Connect IdP)
{% if oidc_discover_root is defined %}oidc_discover_root: {{ oidc_discover_root }}
{% else %}#oidc_discover_root: null
{% endif %}

#
# Support for registering unmapped users
#
# (Not necessary if using regular expressions for mapping users)
#

# Sub-uri user is redirected to if unable to map authenticated-user to
# system-user
# Example:
#     register_uri: '/register'
# Default: null (display error to user if mapping fails)
{% if register_uri is defined %}register_uri: {{ register_uri }}
{% else %}#register_uri: null
{% endif %}

# Root directory on the filesystem that serves the HTML code used to register
# an unmapped user
# Example:
#     register_root: '/var/www/ood/register'
# Default: null (display error to user if mapping fails)
{% if register_root is defined %}register_root: {{ register_root }}
{% else %}#register_root: null
{% endif %}
